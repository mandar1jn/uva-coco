start phase RootPhase {
    info = "Denotes the entry point of your compiler",

    actions {
        pass SPdoScanParse;
        print;
    }
};

traversal Print {
    uid = PRT
};

/*** AST ***/

enum UnOpType {
    prefix = UO,
    values {
        not, neg
    }
};

enum BinOpType {
    prefix = BO,
    values {
        add, sub, mul, div, mod, lt, le, gt, ge, eq, ne,
        and, or
    }
};

nodeset Expr = {Int, Float, Bool, Binop, Unop, Var};
nodeset Stmt = {Assign};

// Nodes you want to be able to link to from your symbol table.
nodeset Link = Expr | Stmt;

root node Program {
    children {
        Stmts stmts { constructor, mandatory }
    }
};

node Stmts {
    children {
        Stmt stmt { constructor, mandatory },
        Stmts next { constructor }
    }
};

node Assign {
    children {
        VarLet let { constructor },
        Expr expr { constructor, mandatory }
    }
};

node Binop {
    children {
        Expr left { constructor, mandatory },
        Expr right { constructor, mandatory }
    },

    attributes {
        BinOpType op { constructor }
    }
};

node Unop {
    children {
        Expr right { constructor, mandatory }
    },

    attributes {
        UnOpType op {constructor}
    }
};

nodeset Vars {
    nodes = {VarLet, Var},

    attributes {
        string name,
        Link decl
    }
};

node VarLet {
    attributes {
        string name { constructor }  // Repeat from nodeset to add constructor
    }
};

node Var {
    attributes {
        string name { constructor }
    }
};

node Int {
    attributes {
        int val { constructor }
    }
};

node Float {
    attributes {
        float val { constructor }
    }
};

node Bool {
    attributes {
        bool val { constructor }
    }
};
